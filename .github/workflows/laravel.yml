name: Laravel

on:
  push:
    branches:
      - prod

jobs:
  laravel-tests:
    runs-on: self-hosted

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Login to DockerHub Registry
      run: echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

    - name: Set Docker Image and Container Tag
      id: set-docker-tag
      run: |
        BRANCH_NAME="${{ github.ref }}"
        BRANCH_NAME=${BRANCH_NAME#refs/heads/}  

        if [[ "$BRANCH_NAME" == "prod" ]]; then
          echo "image_tag=prod-v1" >> $GITHUB_ENV
          echo "container_name=laravel-prod-container" >> $GITHUB_ENV
        fi

    - name: Log Docker Tag
      run: |
        echo "Docker Image Tag: ${{ env.image_tag }}"
        echo "Container Name: ${{ env.container_name }}"

    - name: Build the Docker image
      run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/laravel:${{ env.image_tag }} Laravel/.

    - name: Push Docker image to Docker Hub
      run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/laravel:${{ env.image_tag }}

    - name: Pull Docker Image
      run: sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/laravel:${{ env.image_tag }}

    - name: Check if container exists      
      id: check-container
      run: |
        if [[ "$(docker ps -aq -f name=${{ env.container_name }})" ]]; then
          echo "Container exists ${{ env.container_name }}"
          echo "container_found=true" >> $GITHUB_ENV
        else
          echo "Container does not exist"
          echo "container_found=false" >> $GITHUB_ENV
        fi

    - name: Stop and remove the container (if found)
      if: env.container_found == 'true'
      run: |
        echo "Stopping and removing existing container..."
        docker stop ${{ env.container_name }} || true
        docker rm ${{ env.container_name }} || true

    - name: Set Deployment Command
      id: deployment-command
      run: |
        BRANCH_NAME="${{ github.ref }}"
        BRANCH_NAME=${BRANCH_NAME#refs/heads/}  
        echo ${pwd}

        if [[ "$BRANCH_NAME" == "prod" ]]; then
          echo "create_network=docker network create laravel_network" >> $GITHUB_ENV
          echo "deploy_command=docker run -d -e APP_NAME=Laravel -e APP_ENV=production -e APP_KEY=base64:kq8LEn6X8CR+nNLh9aIhp4mnYyYlS+zROS813S8s52U= -e APP_DEBUG=false -e APP_URL=http://localhost -e LOG_CHANNEL=stack -e DB_CONNECTION=mysql -e DB_HOST=192.168.29.154 -e DB_PORT=3306 -e DB_DATABASE=laravel_prod -e DB_USERNAME=laravel -e DB_PASSWORD=0000 -p 9000:9000 --network laravel_network --name ${{ env.container_name }} sewani/laravel:${{ env.image_tag }}" >> $GITHUB_ENV
          echo "deploy_nginx=docker run -d --name nginx-container --network laravel_network -p 8080:80 -v ${pwd}/Laravel/nginx.conf:/etc/nginx/nginx.conf:ro nginx:latest" >> $GITHUB_ENV
        fi

    - name: Deploy Application
      run: |
        echo "Running deployment command: $deploy_command"
        $create_network
        $deploy_command
        $deploy_nginx
